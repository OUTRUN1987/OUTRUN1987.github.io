// const { run } = require("@tauri-apps/cli");

const messages = [
  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —á–∞—Ç–∏–∫!",
  "–ê –∫–∞–∫ –∏–≥—Ä–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è?",
  "–ë–æ–∂–µ, –∫–∞–∫ –∂–µ –æ–Ω —Ö–æ—Ä–æ—à!",
  "–ö–∞–π—Ñ",
  "–ö—É",
  "–Ø –∫—É—à–∞—Ç—å, –Ω–µ —Ç–µ—Ä—è–π—Ç–µ",
  "–ë–ê–õ–ë–ï–°",
  "UwU UwU UwU Uwu",
  "–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ —Å—Ç—Ä–∏–º–µ",
  "–õ–∞–π–∫ –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω",
  "–ì–¥–µ –¥–æ–Ω–∞—Ç?",
  "–ö—Ä–∞—Å–∞–≤–∞!",
  "–¢–æ–ø —Å—Ç—Ä–∏–º–µ—Ä",
  "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
  "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç—Ä–∏–º",
  "–ì–æ –≤ –¥–∏—Å–∫–æ—Ä–¥",
  "–ö—Ç–æ –∏–∑ –ú–æ—Å–∫–≤—ã?",
  "–û—Ä—É —Å —á–∞—Ç–∞ üòÇ",
  "GG WP",
  "–≠–ø–∏—á–Ω–æ",
  "–ó–∞–ª–µ—Ç–µ–ª –Ω–∞ –º–∏–Ω—É—Ç–∫—É",
  "–ö–∞–∫ –¥–µ–ª–∞, –Ω–∞—Ä–æ–¥?",
  "–ú—É–∑–æ–Ω —Ç–æ–ø",
  "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç",
  "–ñ–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
  "–°–¥–µ–ª–∞–π –≥—Ä–æ–º—á–µ",
  "F –≤ —á–∞—Ç",
  "–õ–µ–≥–µ–Ω–¥–∞",
  "–ö–ª–∞—Å—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
  "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è!",
  "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç—Ä–∏–º?",
  "–ü—Ä–∏–≤–µ—Ç —Å –£–∫—Ä–∞–∏–Ω—ã",
  "Cringe",
  "Based",
  "–†–æ—Ñ–ª",
  "–ö–µ–∫",
  "POGGERS",
  "KEKW",
  "–ú–æ–Ω—Ç–∞–∂ —Ç–æ–ø",
  "–°–∫–∏–ª–ª –∫–æ–Ω–µ—á–Ω–æ",
  "–£–≤–∞–∂–∞—é",
  "–ö—Ä–∞—Å–∞–≤—á–∏–∫",
  "–ì–æ –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ",
  "–•–æ—Ä–æ—à–∏–π –≤–∞–π–±",
  "–ü–æ–ª–Ω—ã–π –æ—Ç—Å—Ç–æ–π",
  
  // –ú–∞—Ç–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç—Ä–µ—Ç—å)
  "–ß–¢–û –ó–ê –ù–ê–•–ï–†",
  "–ò–≥—Ä–∞ –≥–æ–≤–Ω–∞",
  "–ò–¥–∏ –≤ –∂–æ–ø—É",
  "–ö–∞–∫–∞—è —Ö—Ä–µ–Ω—å",
  "–¢—ã —á–µ –¥–µ–±–∏–ª?",
  "–ò–¥–∏–æ—Ç —á—Ç–æ–ª–∏",
  "–¢—É–ø–æ–µ –≤–∏–¥–µ–æ",
  "–ù–∞—Ö–µ—Ä —ç—Ç–æ –Ω–∞–¥–æ",
  "–û—Ç—Å—Ç–æ–π–Ω—ã–π —Å—Ç—Ä–∏–º–µ—Ä",
  "–ú—Ä–∞–∑—å —Ç—ã",
  "–ì–æ–≤–Ω–æ –∞ –Ω–µ –∏–≥—Ä–∞",
  "–î–µ–±–∏–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞",
  "–ò–¥–∏–æ—Ç",
  "–ü—Ä–∏–¥—É—Ä–æ–∫ —Ç—ã –≤–æ–æ–±—â–µ"
];

const nicknames = [
  "–ö—Ç–æ —è?", 
  "–õ—è–≥—É—à–∫–∞", 
  "–í–∞—Å—è228", 
  "xXx_–ù–ê–ì–ò–ë–ê–¢–û–†_xXx", 
  "–î—é—à–∞",
  "Pr0_G4m3r",
  "–ü–µ—Ç1—à–∫–∞",
  "xX_D4RK_L0RD_Xx",
  "NoObMaSt3R",
  "–ë0–ë0–ö",
  "–ö–∏–±–µ—Ä–ö–æ—Ç–õ–µ—Ç–∫–∞",
  "Dimych1337",
  "SaShaProfi228",
  "_S1LV3R_W0LF_",
  "–ú–∞3–ª–∞",
  "D@rKn3sS",
  "–ü—Ä–æ—Å—Ç–æ–ù–∏–∫—Ç–æ—Å",
  "Gh0stR1d3r",
  "–õ3nt—è–π",
  "xXxR4mB0xXx",
  "Str1k3r_777",
  "–ñ0pa",
  "Epic_Fail1337",
  "–ö3k_Pyc",
  "S0s1ska",
  "MrB00M",
  "–ü–∞—Ü–∞–Ω_–°_–†–∞—ë–Ω–∞",
  "C4ptainObv1ous",
  "T–≤0–π_–ë@—Ç—è"
];
const curseWords = [
  "—Ç—É–ø–æ–π", 
  "–Ω–∞—Ö–µ—Ä", 
  "–≥–æ–≤–Ω–∞", 
  "–∂–æ–ø—É", 
  "—Ö—Ä–µ–Ω—å", 
  "–¥–µ–±–∏–ª", 
  "–∏–¥–∏–æ—Ç", 
  "–º—Ä–∞–∑—å", 
  "–≥–æ–≤–Ω–æ", 
  "–¥–µ–±–∏–ª—å–Ω–∞—è", 
  "—Ç—É–ø–∏—Ü–∞", 
  "–ø—Ä–∏–¥—É—Ä–æ–∫",
  "–∏–¥–∏–æ—Ç"
];

let duration = localStorage.getItem("duration") || "medium";
let difficulty = localStorage.getItem("difficulty") || "medium";
let theme = localStorage.getItem("theme") || "terminal";

const durations = {
  short: 30_000,
  medium: 60 * 1000,
  long: 2 * 60 * 1000,
  extra: 5 * 60 * 1000,
  dev: 10_000
};

const difficulties = {
  easy: [3_000, 1_500],
  medium: [2_000, 1_000],
  hard: [1_000, 500],
  psycho: [500, 250]
};

let gameDuration = durations[duration];
let interval;
let stats = { success: 0, fail: 0, skipped: 0, reactionTimes: [] };
let played = false;


let lastCursedTime = null;
let lastMessage = null;
let isLastCursed = false;
let cursedAmount = 0;

function addMessage() {
  let msg = messages[Math.floor(Math.random() * messages.length)];
  let nickname = nicknames[Math.floor(Math.random() * nicknames.length)];
  lastMessage = msg;

  isLastCursed = curseWords.some(c => msg.toLowerCase().includes(c));
  if (isLastCursed) {
    lastCursedTime = Date.now();
    cursedAmount++;
  }

  window.dispatchEvent(new CustomEvent("message-added", { detail: { nickname: nickname, msg: msg } }));
}

function moderateLastMessage() {
  if (isLastCursed) {
    stats.success++;
    if (lastCursedTime) {
      stats.reactionTimes.push(Date.now() - lastCursedTime);
    }
  } else {
    stats.fail++;
  }
}

document.addEventListener("keydown", (e) => {
  if (e.code === "Space") {
    if (!played) {
      played = true;
      startGame();
      console.log("Game started");
      return;
    }
    e.preventDefault();
    window.dispatchEvent(new CustomEvent("message-moderated"));

  }

  if (e.code === "Enter") {
    if (!played) {
      played = true;
      gameDuration = durations["dev"];
      startGame();
      return;
    }
  }
});

function endGame() {
  clearInterval(interval);

  stats.skipped = cursedAmount - stats.success;

  let avgReaction = stats.reactionTimes.length
    ? (stats.reactionTimes.reduce((a, b) => a + b, 0) / stats.reactionTimes.length).toFixed(0) + "–º—Å"
    : "N/A";

  window.dispatchEvent(new CustomEvent("game-ended", {detail: { stats: stats, avgReaction: avgReaction }}));
}



function startGame() {
  let time = Math.random() * difficulties[difficulty][0];
  if (time < difficulties[difficulty][1]) {
    time += difficulties[difficulty][1];
  }

  interval = setInterval(() => {
    addMessage();
  }, time);

  setTimeout(endGame, gameDuration);
  startCountdown(gameDuration / 1000 - 1);
}